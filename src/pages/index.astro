---
import { Image } from "astro:assets";
import Layout from "../layouts/Layout.astro";

const images = await Astro.glob("../assets/*.png");
const texts = await Astro.glob("../assets/*.json");
---

<script>
  function getSecondsToWednesday() {
    const currentDate = new Date();
    const currentDay = currentDate.getDay();
    const daysUntilWednesday = (3 - currentDay + 7) % 7;
    const nextWednesday = new Date(currentDate);
    nextWednesday.setDate(currentDate.getDate() + daysUntilWednesday);
    nextWednesday.setHours(0, 0, 0, 0);
    const remainingTimeInSeconds = Math.floor(
      (Number(nextWednesday) - Number(currentDate)) / 1000
    );
    return remainingTimeInSeconds;
  }

  const content = document.querySelector("#content");
  const container = document.querySelector("#container");
  // Check if it's Wednesday
  if (new Date().getDay() !== 3) {
    if (container) {
      container.innerHTML = "";
    }
    // Set content initially
    const seconds = getSecondsToWednesday();
    const remainingDays = Math.floor(seconds / (24 * 3600));
    const remainingHours = Math.floor((seconds % (24 * 3600)) / 3600);
    const remainingMinutes = Math.floor((seconds % 3600) / 60);
    const remainingSeconds = seconds % 60;
    if (content) {
      content.innerHTML = `${remainingDays} days, ${remainingHours} hours, ${remainingMinutes} minutes and ${remainingSeconds} seconds 'til next Wednesday!`;
    }
    // Update content every second
    setInterval(() => {
      const seconds = getSecondsToWednesday();
      const remainingDays = Math.floor(seconds / (24 * 3600));
      const remainingHours = Math.floor((seconds % (24 * 3600)) / 3600);
      const remainingMinutes = Math.floor((seconds % 3600) / 60);
      const remainingSeconds = seconds % 60;
      if (content) {
        content.innerHTML = `${remainingDays} days, ${remainingHours} hours, ${remainingMinutes} minutes and ${remainingSeconds} seconds 'til next Wednesday!`;
      }
    }, 1000);
  } else {
    if (content) {
      content.innerHTML = "IT'S WEDNESDAY MY DUDES!";
      container?.classList.remove("hidden");
      container?.classList.add("flex");
    }
  }
</script>

<script>
  class ForwardButton extends HTMLElement {
    constructor() {
      super();
      // TODO refactor this part
      const max = Number.parseInt(this.dataset.max || "0");
      const button = this.querySelector("button");
      button?.addEventListener("click", () => {
        const url = window.location.href;
        const match = url.match(/#img-(\d+)/);
        if (match && match[1]) {
          let img = +match[1];
          if (img >= max) {
            img = max - 1;
          }
          window.location.href = url.replace(`#img-${img}`, `#img-${img + 1}`);
        } else {
          window.location.href = url + "#img-1";
        }
      });
    }
  }

  class Backbutton extends HTMLElement {
    constructor() {
      super();
      // TODO refactor this part
      const button = this.querySelector("button");
      button?.addEventListener("click", () => {
        const url = window.location.href;
        const match = url.match(/#img-(\d+)/);
        if (match && match[1]) {
          let img = +match[1];
          if (img === 0) {
            img = 1;
          }
          window.location.href = url.replace(`#img-${img}`, `#img-${img - 1}`);
        } else {
          window.location.href = url + "#img-0";
        }
      });
    }
  }

  customElements.define("forward-button", ForwardButton);
  customElements.define("back-button", Backbutton);
</script>

<Layout title="It's Wednesday my dudes!">
  <main class="flex flex-col justify-center items-center h-full w-screen gap-8">
    <h1
      id="content"
      class="text-4xl bg-clip-text text-center max-w-[80%] text-transparent font-extrabold from-amber-200 to-lime-300 bg-gradient-to-r"
    >
    </h1>
    <div
      id="container"
      class="hidden gap-10 overflow-x-scroll p-6 md:p-10 max-w-full sm:max-w-2xl min-h-[400px]"
    >
      <div class="m-auto relative md:max-w-sm max-w-xs">
        <div
          class="flex overflow-x-auto aspect-square max-h-[80%] gap-10 no-scrollbar snap-x snap-mandatory scroll-smooth rounded-sm"
        >
          {
            images
              .reverse()
              .map((image, idx) => (
                <Image
                  id={`img-${idx}`}
                  class="snap-center flex-shrink-0 flex-grow"
                  src={image.default}
                  alt="a funny image"
                  title={texts[idx].text}
                />
              ))
          }
        </div>
        <nav
          class="flex gap-4 absolute z-10 -translate-x-1/2 left-1/2 -bottom-10"
        >
          <a
            class="text-neutral-400 hover:text-neutral-100 ease-out duration-200"
            title="go to start"
            href="#img-0">Monday</a
          >
          <back-button>
            <button
              class="text-neutral-400 hover:text-neutral-100 ease-out duration-200"
              title="go back">Tuesday</button
            >
          </back-button>
          <forward-button data-max={images.length - 1}>
            <button
              class="text-neutral-400 hover:text-neutral-100 ease-out duration-200"
              title="go forward">Thursday</button
            >
          </forward-button>
          <a
            class="text-neutral-400 hover:text-neutral-100 ease-out duration-200"
            title="go to end"
            href={`#img-${images.length - 1}`}>Sunday</a
          >
        </nav>
      </div>
    </div>
  </main>
</Layout>
